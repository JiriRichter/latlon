{"version":3,"file":"latlon-utils.js","sources":["../src/format/formatter.js","../src/parse/coordinate-number.js","../src/parse/validator.js","../src/parse/coordinates.js","../src/parse/index.js"],"sourcesContent":["\r\nfunction getLatLngCoord(_lat, _lng, options) {\r\n\r\n    var latlng = { lat: _lat, lng: _lng },\r\n        lat,\r\n        lng,\r\n        deg,\r\n        min;\r\n\r\n    // 180 degrees & negative\r\n    if (latlng.lng < 0) {\r\n        latlng.lng_neg = true;\r\n        latlng.lng = Math.abs(latlng.lng);\r\n    }\r\n    else {\r\n        latlng.lng_neg = false;\r\n    }\r\n\r\n    if (latlng.lat < 0) {\r\n        latlng.lat_neg = true;\r\n        latlng.lat = Math.abs(latlng.lat);\r\n    }\r\n    else {\r\n        latlng.lat_neg = false;\r\n    }\r\n\r\n    if (latlng.lng > 180) {\r\n        latlng.lng = 360 - latlng.lng;\r\n        latlng.lng_neg = !latlng.lng_neg;\r\n    }\r\n\r\n    // format\r\n    if (options['format'] === 'DM') {\r\n        deg = parseInt(latlng.lng);\r\n        lng = deg + '&deg; ' + _format('00.' + '0'.repeat(options['digits']), (latlng.lng - deg) * 60) + \"'\";\r\n        deg = parseInt(latlng.lat);\r\n        lat = deg + '&deg; ' + _format('00.' + '0'.repeat(options['digits']), (latlng.lat - deg) * 60) + \"'\";\r\n    }\r\n    else if (options['format'] === 'DMS') {\r\n        deg = parseInt(latlng.lng);\r\n        min = (latlng.lng - deg) * 60;\r\n        lng = deg + '&deg; ' + _format('00', parseInt(min)) + \"' \" + _format('00.0', (min - parseInt(min)) * 60) + \"''\";\r\n        deg = parseInt(latlng.lat);\r\n        min = (latlng.lat - deg) * 60;\r\n        lat = deg + '&deg; ' + _format('00', parseInt(min)) + \"' \" + _format('00.0', (min - parseInt(min)) * 60) + \"''\";\r\n    }\r\n    else { // 'DD'\r\n        lng = _format('#0.' + '0'.repeat(options['digits']), latlng.lng) + '&deg;';\r\n        lat = _format('##0.' + '0'.repeat(options['digits']), latlng.lat) + '&deg;';\r\n    }\r\n\r\n    return {\r\n        'lng': (!options['designators'] && latlng.lng_neg ? '-' : '') + lng + (options['designators'] ? (latlng.lng_neg ? ' W' : ' E') : ''),\r\n        'lat': (!options['designators'] && latlng.lat_neg ? '-' : '') + lat + (options['designators'] ? (latlng.lat_neg ? ' S' : ' N') : '')\r\n    };\r\n}\n\n/**\r\n    * @preserve IntegraXor Web SCADA - JavaScript Number Formatter\r\n    * http://www.integraxor.com/\r\n    * author: KPL, KHL\r\n    * (c)2011 ecava\r\n    * Dual licensed under the MIT or GPL Version 2 licenses.\r\n    */\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n// param: Mask & Value\r\n////////////////////////////////////////////////////////////////////////////////\r\nfunction _format(m, v) {\r\n    if (!m || isNaN(+v)) {\r\n        return v; //return as it is.\r\n    }\r\n    //convert any string to number according to formation sign.\r\n    var v = m.charAt(0) === '-' ? -v : +v;\r\n    var isNegative = v < 0 ? v = -v : 0; //process only abs(), and turn on flag.\r\n\r\n    //search for separator for grp & decimal, anything not digit, not +/- sign, not #.\r\n    var result = m.match(/[^\\d\\-\\+#]/g);\r\n    var Decimal = (result && result[result.length - 1]) || '.'; //treat the right most symbol as decimal \r\n    var Group = (result && result[1] && result[0]) || ',';  //treat the left most symbol as group separator\r\n\r\n    //split the decimal for the format string if any.\r\n    var m = m.split(Decimal);\r\n    //Fix the decimal first, toFixed will auto fill trailing zero.\r\n    v = v.toFixed(m[1] && m[1].length);\r\n    v = +(v) + ''; //convert number to string to trim off *all* trailing decimal zero(es)\r\n\r\n    //fill back any trailing zero according to format\r\n    var pos_trail_zero = m[1] && m[1].lastIndexOf('0'); //look for last zero in format\r\n    var part = v.split('.');\r\n    //integer will get !part[1]\r\n    if (!part[1] || part[1] && part[1].length <= pos_trail_zero) {\r\n        v = (+v).toFixed(pos_trail_zero + 1);\r\n    }\r\n    var szSep = m[0].split(Group); //look for separator\r\n    m[0] = szSep.join(''); //join back without separator for counting the pos of any leading 0.\r\n\r\n    var pos_lead_zero = m[0] && m[0].indexOf('0');\r\n    if (pos_lead_zero > -1) {\r\n        while (part[0].length < (m[0].length - pos_lead_zero)) {\r\n            part[0] = '0' + part[0];\r\n        }\r\n    }\r\n    else if (+part[0] === 0) {\r\n        part[0] = '';\r\n    }\r\n\r\n    v = v.split('.');\r\n    v[0] = part[0];\r\n\r\n    //process the first group separator from decimal (.) only, the rest ignore.\r\n    //get the length of the last slice of split result.\r\n    var pos_separator = (szSep[1] && szSep[szSep.length - 1].length);\r\n    if (pos_separator) {\r\n        var integer = v[0];\r\n        var str = '';\r\n        var offset = integer.length % pos_separator;\r\n        for (var i = 0, l = integer.length; i < l; i++) {\r\n\r\n            str += integer.charAt(i); //ie6 only support charAt for sz.\r\n            //-pos_separator so that won't trail separator on full length\r\n            if (!((i - offset + 1) % pos_separator) && i < l - pos_separator) {\r\n                str += Group;\r\n            }\r\n        }\r\n        v[0] = str;\r\n    }\r\n\r\n    v[1] = (m[1] && v[1]) ? Decimal + v[1] : \"\";\r\n    return (isNegative ? '-' : '') + v[0] + v[1]; //put back any negation and combine integer and fraction.\r\n}\n\nconst defaults = {\n    //template: '{lat} | {lng}',\r\n    'template': '{lat} {lng}',\r\n    // https://en.wikipedia.org/wiki/ISO_6709\r\n    'format': 'DD', // DD, DM, DMS\r\n    'designators': true,\r\n    'digits': 3\r\n};\n\nexport function format(a, b, c) {\n    let lat, lng, options;\n\n    if (Array.isArray(a)) {\n        lat = a[0];\r\n        lng = a[1];\r\n        options = b;\r\n    }\n    else if (typeof a === 'number') {\n        lat = a;\r\n        lng = b;\r\n        options = c;\r\n    }\n    else if (typeof a === 'object') {\n        lat = a['lat'];\r\n        lng = 'lon' in a ? a['lon'] : a['lng'];\r\n        options = b;\r\n    }\n\n    let settings = Object.assign({}, defaults, options);\n\n    let latlng = getLatLngCoord(lat, lng, settings);\n    return settings['template'].replace(/\\{lat\\}/g, latlng['lat']).replace(/\\{lng\\}/g, latlng['lng']);\n}\n","export class CoordinateNumber {\n  constructor(coordinateNumbers) {\n    coordinateNumbers = this.normalizeCoordinateNumbers(coordinateNumbers);\n    this.degrees = coordinateNumbers[0], this.minutes = coordinateNumbers[1], this.seconds = coordinateNumbers[2], this.milliseconds = coordinateNumbers[3];\n    this.sign = this.normalizedSignOf(this.degrees);\n    this.degrees = Math.abs(this.degrees);\n  }\n  normalizeCoordinateNumbers(coordinateNumbers) {\n    var currentNumber, i, j, len, normalizedNumbers;\n    normalizedNumbers = [0, 0, 0, 0];\n    for (i = j = 0, len = coordinateNumbers.length; j < len; i = ++j) {\n      currentNumber = coordinateNumbers[i];\n      normalizedNumbers[i] = parseFloat(currentNumber);\n    }\n    return normalizedNumbers;\n  }\n  normalizedSignOf(number) {\n    if (number >= 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n  detectSpecialFormats() {\n    if (this.degreesCanBeSpecial()) {\n      if (this.degreesCanBeMilliseconds()) {\n        return this.degreesAsMilliseconds();\n      } else if (this.degreesCanBeDegreesMinutesAndSeconds()) {\n        return this.degreesAsDegreesMinutesAndSeconds();\n      } else if (this.degreesCanBeDegreesAndMinutes()) {\n        return this.degreesAsDegreesAndMinutes();\n      }\n    }\n  }\n  degreesCanBeSpecial() {\n    var canBe;\n    canBe = false;\n    if (!this.minutes && !this.seconds) {\n      canBe = true;\n    }\n    return canBe;\n  }\n  degreesCanBeMilliseconds() {\n    var canBe;\n    if (this.degrees > 909090) {\n      canBe = true;\n    } else {\n      canBe = false;\n    }\n    return canBe;\n  }\n  degreesAsMilliseconds() {\n    this.milliseconds = this.degrees;\n    return this.degrees = 0;\n  }\n  degreesCanBeDegreesMinutesAndSeconds() {\n    var canBe;\n    if (this.degrees > 9090) {\n      canBe = true;\n    } else {\n      canBe = false;\n    }\n    return canBe;\n  }\n  degreesAsDegreesMinutesAndSeconds() {\n    var newDegrees;\n    newDegrees = Math.floor(this.degrees / 10000);\n    this.minutes = Math.floor((this.degrees - newDegrees * 10000) / 100);\n    this.seconds = Math.floor(this.degrees - newDegrees * 10000 - this.minutes * 100);\n    return this.degrees = newDegrees;\n  }\n  degreesCanBeDegreesAndMinutes() {\n    var canBe;\n    if (this.degrees > 360) {\n      canBe = true;\n    } else {\n      canBe = false;\n    }\n    return canBe;\n  }\n  degreesAsDegreesAndMinutes() {\n    var newDegrees;\n    newDegrees = Math.floor(this.degrees / 100);\n    this.minutes = this.degrees - newDegrees * 100;\n    return this.degrees = newDegrees;\n  }\n  toDecimal() {\n    var decimalCoordinate;\n    decimalCoordinate = this.sign * (this.degrees + this.minutes / 60 + this.seconds / 3600 + this.milliseconds / 3600000);\n    return decimalCoordinate;\n  }\n}","export class Validator {\n  constructor() { }\n  isValid(coordinates) {\n    var error, isValid, validationError;\n    isValid = true;\n    try {\n      this.validate(coordinates);\n      return isValid;\n    } catch (error) {\n      validationError = error;\n      isValid = false;\n      return isValid;\n    }\n  }\n  validate(coordinates) {\n    this.checkContainsNoLetters(coordinates);\n    this.checkValidOrientation(coordinates);\n    return this.checkNumbers(coordinates);\n  }\n  checkContainsNoLetters(coordinates) {\n    var containsLetters;\n    containsLetters = /(?![neswd])[a-z]/i.test(coordinates);\n    if (containsLetters) {\n      throw new Error('Coordinate contains invalid alphanumeric characters.');\n    }\n  }\n  checkValidOrientation(coordinates) {\n    var validOrientation;\n    validOrientation = /^[^nsew]*[ns]?[^nsew]*[ew]?[^nsew]*$/i.test(coordinates);\n    if (!validOrientation) {\n      throw new Error('Invalid cardinal direction.');\n    }\n  }\n  checkNumbers(coordinates) {\n    var coordinateNumbers;\n    coordinateNumbers = coordinates.match(/-?\\d+(\\.\\d+)?/g);\n    this.checkAnyCoordinateNumbers(coordinateNumbers);\n    this.checkEvenCoordinateNumbers(coordinateNumbers);\n    return this.checkMaximumCoordinateNumbers(coordinateNumbers);\n  }\n  checkAnyCoordinateNumbers(coordinateNumbers) {\n    if (coordinateNumbers.length === 0) {\n      throw new Error('Could not find any coordinate number');\n    }\n  }\n  checkEvenCoordinateNumbers(coordinateNumbers) {\n    var isUnevenNumbers;\n    isUnevenNumbers = coordinateNumbers.length % 2;\n    if (isUnevenNumbers) {\n      throw new Error('Uneven count of latitude/longitude numbers');\n    }\n  }\n  checkMaximumCoordinateNumbers(coordinateNumbers) {\n    if (coordinateNumbers.length > 6) {\n      throw new Error('Too many coordinate numbers');\n    }\n  }\n}","import { CoordinateNumber } from './coordinate-number';\nimport { Validator } from './validator';\n\nexport class Coordinates {\n  constructor(coordinateString) {\n    this.coordinates = coordinateString;\n    this.latitudeNumbers = null;\n    this.longitudeNumbers = null;\n    this.validate();\n    this.parse();\n  }\n  validate() {\n    var validator;\n    validator = new Validator;\n    return validator.validate(this.coordinates);\n  }\n  parse() {\n    this.groupCoordinateNumbers();\n    this.latitude = this.extractLatitude();\n    return this.longitude = this.extractLongitude();\n  }\n  groupCoordinateNumbers() {\n    var coordinateNumbers, numberCountEachCoordinate;\n    coordinateNumbers = this.extractCoordinateNumbers(this.coordinates);\n    numberCountEachCoordinate = coordinateNumbers.length / 2;\n    this.latitudeNumbers = coordinateNumbers.slice(0, numberCountEachCoordinate);\n    return this.longitudeNumbers = coordinateNumbers.slice(0 - numberCountEachCoordinate);\n  }\n  extractCoordinateNumbers(coordinates) {\n    return coordinates.match(/-?\\d+(\\.\\d+)?/g);\n  }\n  extractLatitude() {\n    var latitude;\n    latitude = this.coordinateNumbersToDecimal(this.latitudeNumbers);\n    if (this.latitudeIsNegative()) {\n      latitude = latitude * -1;\n    }\n    return latitude;\n  }\n  extractLongitude() {\n    var longitude;\n    longitude = this.coordinateNumbersToDecimal(this.longitudeNumbers);\n    if (this.longitudeIsNegative()) {\n      longitude = longitude * -1;\n    }\n    return longitude;\n  }\n  coordinateNumbersToDecimal(coordinateNumbers) {\n    var coordinate, decimalCoordinate;\n    coordinate = new CoordinateNumber(coordinateNumbers);\n    coordinate.detectSpecialFormats();\n    decimalCoordinate = coordinate.toDecimal();\n    return decimalCoordinate;\n  }\n  latitudeIsNegative() {\n    var isNegative;\n    isNegative = this.coordinates.match(/s/i);\n    return isNegative;\n  }\n  longitudeIsNegative() {\n    var isNegative;\n    isNegative = this.coordinates.match(/w/i);\n    return isNegative;\n  }\n  getLatitude() {\n    return this.latitude;\n  }\n  getLongitude() {\n    return this.longitude;\n  }\n}","import { Coordinates } from './coordinates';\r\n\r\nexport function parse(str) {\r\n    let coordinates = new Coordinates(str);\r\n    coordinates.parse();\r\n\r\n    return {\r\n        latitude: coordinates.latitude, \r\n        longitude: coordinates.longitude\r\n    };\r\n}"],"names":["getLatLngCoord","_lat","_lng","options","latlng","lat","lng","deg","min","lng_neg","Math","abs","lat_neg","parseInt","_format","repeat","m","v","isNaN","charAt","isNegative","result","match","Decimal","length","Group","split","toFixed","pos_trail_zero","lastIndexOf","part","szSep","join","pos_lead_zero","indexOf","pos_separator","integer","str","offset","i","l","defaults","format","a","b","c","Array","isArray","_typeof","settings","Object","assign","replace","CoordinateNumber","coordinateNumbers","_classCallCheck","normalizeCoordinateNumbers","degrees","minutes","seconds","milliseconds","sign","normalizedSignOf","_createClass","key","value","currentNumber","j","len","normalizedNumbers","parseFloat","number","detectSpecialFormats","degreesCanBeSpecial","degreesCanBeMilliseconds","degreesAsMilliseconds","degreesCanBeDegreesMinutesAndSeconds","degreesAsDegreesMinutesAndSeconds","degreesCanBeDegreesAndMinutes","degreesAsDegreesAndMinutes","canBe","newDegrees","floor","toDecimal","decimalCoordinate","Validator","isValid","coordinates","validate","error","checkContainsNoLetters","checkValidOrientation","checkNumbers","containsLetters","test","Error","validOrientation","checkAnyCoordinateNumbers","checkEvenCoordinateNumbers","checkMaximumCoordinateNumbers","isUnevenNumbers","Coordinates","coordinateString","latitudeNumbers","longitudeNumbers","parse","validator","groupCoordinateNumbers","latitude","extractLatitude","longitude","extractLongitude","numberCountEachCoordinate","extractCoordinateNumbers","slice","coordinateNumbersToDecimal","latitudeIsNegative","longitudeIsNegative","coordinate","getLatitude","getLongitude"],"mappings":"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"}